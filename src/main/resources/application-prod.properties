# MySQL 연결 설정
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://${SQL_HOST}:${SQL_PORT}/${SQL_DBNAME}?serverTimezone=Asia/Seoul&characterEncoding=UTF-8&useSSL=true&allowPublicKeyRetrieval=true&rewriteBatchedStatements=true
spring.datasource.username=${SQL_USER}
spring.datasource.password=${SQL_PASSWORD}
# HikariCP 설정 추가
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=10
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.max-lifetime=1200000
# 이메일 설정
spring.mail.username=${EMAIL_SENDER}
spring.mail.password=${EMAIL_SENDER_PASSWORD}
# JWT 설정
jwt.secret=${JWT_SECRET}
jwt.access-token-expiration=${JWT_ACCESS_VALIDITY}
jwt.refresh-token-expiration=${JWT_REFRESH_VALIDITY}
jwt.temporary-token-expiration=${JWT_TEMPORARY_VALIDITY}
# Redis 설정
spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=${REDIS_PORT}
spring.data.redis.password=${REDIS_PASSWORD:}
spring.data.redis.timeout=60000
spring.data.redis.lettuce.pool.max-active=8
spring.data.redis.lettuce.pool.max-idle=8
spring.data.redis.lettuce.pool.min-idle=2
spring.data.redis.lettuce.pool.max-wait=5000ms

# 로깅 설정 (운영 환경에 맞게 조정)
logging.level.root=WARN
logging.level.com.honeyboard=INFO
logging.level.org.springframework.web=INFO
logging.level.org.springframework.security=INFO
logging.level.org.springframework.data.redis=INFO
# OAuth2 Google 설정
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=email
spring.security.oauth2.client.registration.google.redirect-uri=${GOOGLE_REDIRECT_URL}
# OAuth2 Naver 설정
spring.security.oauth2.client.registration.naver.client-id=${NAVER_CLIENT_ID}
spring.security.oauth2.client.registration.naver.client-secret=${NAVER_CLIENT_SECRET}
spring.security.oauth2.client.registration.naver.redirect-uri=${BASE_URL}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.scope=email,name
spring.security.oauth2.client.registration.naver.client-name=Naver
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response
# OAuth2 Kakao 설정
spring.security.oauth2.client.registration.kakao.client-id=${KAKAO_CLIENT_ID}
spring.security.oauth2.client.registration.kakao.client-secret=${KAKAO_CLIENT_SECRET}
spring.security.oauth2.client.registration.kakao.redirect-uri=${BASE_URL}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.kakao.client-authentication-method=POST
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,account_email
spring.security.oauth2.client.registration.kakao.client-name=Kakao
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id

# 보안 : secure = true (https를 통해서만 쿠키 전송 가능)
# secure = false (http, https 모두 쿠키 전송 가능)
cookie.secure-flag=false

# Frontend URL 설정
frontend.url=${FRONTEND_URL}