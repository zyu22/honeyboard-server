<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.honeyboard.api.project.track.mapper.TrackTeamMapper">
    <!-- 팀 생성 -->
    <insert id="insertTrackTeam">

        INSERT INTO track_team (
        generation_id,
        track_project_id,
        is_completed,
        created_at,
        updated_at
        )
        SELECT
        g.id as generation_id,
        #{trackProjectId},
        false,
        NOW(),
        NOW()
        FROM generation g
        WHERE g.is_active = true
    </insert>

    <select id="getLastInsertedTeamId" resultType="int">
        SELECT LAST_INSERT_ID()
    </select>

    <!-- 팀장 추가 -->
    <insert id="insertTeamLeader">
        INSERT INTO track_team_member (
            track_team_id,
            user_id,
            role,
            created_at
        ) VALUES (
                     #{teamId},
                     #{leaderId},
                     'LEADER',
                     NOW()
                 )
    </insert>

    <!-- 팀원들 추가 -->
    <insert id="insertTeamMembers">
        INSERT INTO track_team_member (
        track_team_id,
        user_id,
        role,
        created_at
        ) VALUES
        <foreach collection="memberIds" item="memberId" separator=",">
            (#{teamId}, #{memberId}, 'MEMBER', NOW())
        </foreach>
    </insert>

    <!-- 팀 존재 여부 확인 -->
    <select id="existsByProjectIdAndUserId" resultType="boolean">
        SELECT EXISTS (
            SELECT 1
            FROM track_team_member tm
                     INNER JOIN track_team t ON tm.track_team_id = t.id
            WHERE t.track_project_id = #{trackProjectId}
              AND tm.user_id = #{userId}
        )
    </select>

    <!-- 현재 팀장 ID 조회 -->
    <select id="getTeamLeaderId" resultType="int">
        SELECT user_id
        FROM track_team_member
        WHERE track_team_id = #{teamId}
          AND role = 'LEADER'
    </select>

    <!-- 팀원 전체 삭제 (팀장 제외) -->
    <delete id="deleteAllTeamMembers">
        DELETE FROM track_team_member
        WHERE track_team_id = #{teamId}
          AND role = 'MEMBER'
    </delete>

    <!-- 팀장 변경 -->
    <update id="updateTeamLeader">
        UPDATE track_team_member
        SET role =
                CASE
                    WHEN user_id = #{newLeaderId} THEN 'LEADER'
                    WHEN role = 'LEADER' THEN 'MEMBER'
                    END,
            created_at = NOW()
        WHERE track_team_id = #{teamId}
          AND user_id IN (#{oldLeaderId}, #{newLeaderId})
    </update>

    <!-- 팀 완료 상태 변경 -->
    <update id="updateTeamCompleted">
        UPDATE track_team
        SET
            is_completed = #{isCompleted},
            updated_at = NOW()
        WHERE id = #{teamId}
    </update>
</mapper>